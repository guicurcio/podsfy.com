generator client {
  provider        = "prisma-client-js"
  output          = "./generated/platform-client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("PLATFORM_DATABASE_CLIENT_URL")
  schemas  = ["auth", "public"]
}

model migrations {
  id          Int       @id
  name        String    @unique @db.VarChar(100)
  hash        String    @db.VarChar(40)
  executed_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("auth")
}

model provider_requests {
  id      String @id @db.Uuid
  options Json?

  @@schema("auth")
}

model providers {
  id             String           @id
  user_providers user_providers[]

  @@schema("auth")
}

model refresh_tokens {
  refresh_token      String   @id @db.Uuid
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  expires_at         DateTime @db.Timestamptz(6)
  user_id            String   @db.Uuid
  refresh_token_hash String?  @default(dbgenerated("sha256(((refresh_token)::text)::bytea)")) @db.VarChar(255)
  users              users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user")

  @@schema("auth")
}

model roles {
  role       String       @id
  user_roles user_roles[]
  users      users[]

  @@schema("auth")
}

model user_providers {
  id               String    @id @default(dbgenerated("public.gen_random_uuid()")) @db.Uuid
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  user_id          String    @db.Uuid
  access_token     String
  refresh_token    String?
  provider_id      String
  provider_user_id String
  providers        providers @relation(fields: [provider_id], references: [id], map: "fk_provider")
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user")

  @@unique([provider_id, provider_user_id])
  @@unique([user_id, provider_id])
  @@schema("auth")
}

model user_roles {
  id         String   @id @default(dbgenerated("public.gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user_id    String   @db.Uuid
  role       String
  roles      roles    @relation(fields: [role], references: [role], map: "fk_role")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user")

  @@unique([user_id, role])
  @@schema("auth")
}

model user_security_keys {
  id                    String  @id @default(dbgenerated("public.gen_random_uuid()")) @db.Uuid
  user_id               String  @db.Uuid
  credential_id         String  @unique(map: "user_security_key_credential_id_key")
  credential_public_key Bytes?
  counter               BigInt  @default(0)
  transports            String  @default("") @db.VarChar(255)
  nickname              String?
  users                 users   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user")

  @@schema("auth")
}

model users {
  id                         String               @id @default(dbgenerated("public.gen_random_uuid()")) @db.Uuid
  created_at                 DateTime             @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime             @default(now()) @db.Timestamptz(6)
  last_seen                  DateTime?            @db.Timestamptz(6)
  disabled                   Boolean              @default(false)
  display_name               String               @default("")
  avatar_url                 String               @default("")
  locale                     String               @db.VarChar(2)
  email                      String?              @unique @db.Citext
  phone_number               String?              @unique
  password_hash              String?
  email_verified             Boolean              @default(false)
  phone_number_verified      Boolean              @default(false)
  new_email                  String?              @db.Citext
  otp_method_last_used       String?
  otp_hash                   String?
  otp_hash_expires_at        DateTime             @default(now()) @db.Timestamptz(6)
  default_role               String               @default("user")
  is_anonymous               Boolean              @default(false)
  totp_secret                String?
  active_mfa_type            String?
  ticket                     String?
  ticket_expires_at          DateTime             @default(now()) @db.Timestamptz(6)
  metadata                   Json?
  webauthn_current_challenge String?
  refresh_tokens             refresh_tokens[]
  user_providers             user_providers[]
  user_roles                 user_roles[]
  user_security_keys         user_security_keys[]
  roles                      roles                @relation(fields: [default_role], references: [role], map: "fk_default_role")
  profile                    profile?
  profiles                   profiles?

  @@schema("auth")
}

model favorites {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_id String   @db.Uuid
  podcast_id String   @db.Uuid
  profiles   profiles @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

model profile {
  id              String   @id(map: "profile_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_num     Int      @unique(map: "profile_profile_num_key1") @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  username        String   @unique(map: "profile_username_key1")
  creator_user_id String   @unique(map: "profile_creator_user_id_key1") @db.Uuid
  name            String?
  bio             String?
  avatar          String?
  location        String?
  website         String?
  karma           String?
  users           users    @relation(fields: [creator_user_id], references: [id], onDelete: Cascade, map: "profile_creator_user_id_fkey1")

  @@schema("public")
}

model profiles {
  id              String      @id(map: "profile_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_num     Int         @unique(map: "profile_profile_num_key") @default(autoincrement())
  created_at      DateTime    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime    @default(now()) @db.Timestamptz(6)
  username        String      @unique(map: "profile_username_key")
  creator_user_id String      @unique(map: "profile_creator_user_id_key") @db.Uuid
  name            String?
  bio             String?
  avatar          String?
  location        String?
  website         String?
  karma           String?
  favorites       favorites[]
  users           users       @relation(fields: [creator_user_id], references: [id], onDelete: Cascade, map: "profile_creator_user_id_fkey")
  watchlist       watchlist[]

  @@schema("public")
}

model ratings {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_id String @db.Uuid
  podcast_id String @db.Uuid
  rating     Int

  @@unique([profile_id, podcast_id])
  @@schema("public")
}

model watchlist {
  id         String   @id @db.Uuid
  profile_id String   @db.Uuid
  podcast_id String   @db.Uuid
  profiles   profiles @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@schema("public")
}
